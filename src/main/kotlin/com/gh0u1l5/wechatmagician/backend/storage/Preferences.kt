package com.gh0u1l5.wechatmagician.backend.storage

import android.content.*
import android.database.Cursor
import android.net.Uri
import com.gh0u1l5.wechatmagician.Global.ACTION_UPDATE_PREF
import com.gh0u1l5.wechatmagician.Global.PREFERENCE_PROVIDER_AUTHORITY
import com.gh0u1l5.wechatmagician.Global.PREFERENCE_STRING_LIST_KEYS
import com.gh0u1l5.wechatmagician.spellbook.util.BasicUtil.tryAsynchronously
import com.gh0u1l5.wechatmagician.spellbook.util.BasicUtil.tryVerbosely
import com.gh0u1l5.wechatmagician.spellbook.util.WaitChannel
import java.util.concurrent.ConcurrentHashMap

class Preferences(private val preferencesName: String) : SharedPreferences {

    // loadChannel resumes all the threads waiting for the preference loading.
    private val loadChannel = WaitChannel()

    // listCache caches the string lists in memory to speed up getStringList()
    private val listCache: MutableMap<String, List<String>> = ConcurrentHashMap()

    // content is the preferences generated by the frond end of Wechat Magician.
    private val content: MutableMap<String, Any?> = ConcurrentHashMap()

    // load reads the shared preferences or reloads the existing preferences
    fun load(context: Context) {
        tryAsynchronously {
            var cursor: Cursor? = null
            try {
                val uri = Uri.parse("content://$PREFERENCE_PROVIDER_AUTHORITY/$preferencesName")
                cursor = context.contentResolver.query(uri, null, null, null, null)
                while (cursor.moveToNext()) {
                    val key = cursor.getString(0)
                    val type = cursor.getString(2)
                    content[key] = when (type) {
                        "Int"     -> cursor.getInt(1)
                        "Long"    -> cursor.getLong(1)
                        "Float"   -> cursor.getFloat(1)
                        "Boolean" -> (cursor.getString(1) == "true")
                        "String"  -> cursor.getString(1)
                        else -> null
                    }
                }
            } finally {
                loadChannel.done()
                cursor?.close()
                cacheStringList()
            }
        }
    }

    // listen registers the updateReceiver to listen the update events from the frontend.
    private val updateReceiver = object : BroadcastReceiver() {
        override fun onReceive(context: Context?, intent: Intent?) {
            loadChannel.wait()
            if (intent != null) {
                val key = intent.getStringExtra("key")
                content[key] = intent.extras.get("value")
            }
        }
    }

    fun listen(context: Context) {
        tryVerbosely {
            context.registerReceiver(updateReceiver, IntentFilter(ACTION_UPDATE_PREF))
        }
    }

    private fun cacheStringList() {
        PREFERENCE_STRING_LIST_KEYS.forEach { key ->
            listCache[key] = getString(key, "").split(" ", "|").filter { it.isNotEmpty() }
        }
    }

    override fun contains(key: String): Boolean = content.contains(key)

    override fun getAll(): MutableMap<String, *>? = content

    private fun getValue(key: String): Any? {
        loadChannel.wait()
        return all?.get(key)
    }

    private inline fun <reified T>getValue(key: String, defValue: T) = getValue(key) as? T ?: defValue

    override fun getInt(key: String, defValue: Int): Int = getValue(key, defValue)

    override fun getLong(key: String, defValue: Long): Long = getValue(key, defValue)

    override fun getFloat(key: String, defValue: Float): Float = getValue(key, defValue)

    override fun getBoolean(key: String, defValue: Boolean): Boolean = getValue(key, defValue)

    override fun getString(key: String, defValue: String): String = getValue(key, defValue)

    override fun getStringSet(key: String, defValue: MutableSet<String>): MutableSet<String> = getValue(key, defValue)

    fun getStringList(key: String, defValue: List<String>): List<String> {
        loadChannel.wait()
        return listCache[key] ?: defValue
    }

    override fun edit(): SharedPreferences.Editor {
        throw UnsupportedOperationException()
    }

    override fun registerOnSharedPreferenceChangeListener(listener: SharedPreferences.OnSharedPreferenceChangeListener?) {
        throw UnsupportedOperationException()
    }

    override fun unregisterOnSharedPreferenceChangeListener(listener: SharedPreferences.OnSharedPreferenceChangeListener?) {
        throw UnsupportedOperationException()
    }
}
